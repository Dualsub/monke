cmake_minimum_required(VERSION 3.20)

project(monke)

set(CMAKE_CXX_STANDARD 20)

# Get the current version of the project from file
file(READ "VERSION" VERSION)
# Set executable name
set(EXECUTABLE_NAME "${PROJECT_NAME}_v${VERSION}")

# # Define the asset directory for the project
# set(MK_ASSET_DIR "./assets")
# set(VLT_ASSET_DIR "${MK_ASSET_DIR}")

add_subdirectory(third_party)

add_executable(monke WIN32
    src/main.cpp
    src/Core/Core.cpp
    src/Application.cpp
    src/Game/Game.cpp
    src/Scene/SceneDescription.cpp
    src/Physics/PhysicsWorld.cpp
    src/Physics/Layers.cpp
    src/Input/InputDevice.cpp
    src/Audio/AudioSystem.cpp
    src/UI/Layout.cpp
    src/UI/UIHelper.cpp

    src/Game/StateMachines/GameStateMachine.cpp

    src/Game/Helpers/PhysicsRenderingHelper.cpp
)

target_link_libraries(monke PRIVATE Vultron Jolt fmod)
target_include_directories(monke PRIVATE include)
set_target_properties(monke PROPERTIES OUTPUT_NAME ${EXECUTABLE_NAME})

set(DLLS
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmod/studio/lib/x64/fmodstudio.dll
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmod/core/lib/x64/fmod.dll
)

foreach(dll ${DLLS})
    add_custom_command(TARGET monke POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${dll}
        ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/)
endforeach()

# Set if not defined externally
if(NOT DEFINED MK_ASSET_DIR)
    set(MK_ASSET_DIR "${CMAKE_CURRENT_SOURCE_DIR}/assets") 
endif()

if(NOT DEFINED VLT_ASSET_DIR)
    set(VLT_ASSET_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/Vultron/vultron/assets")
endif()

message(STATUS "MK_ASSETS_DIR: ${MK_ASSET_DIR}")

target_compile_definitions(monke PUBLIC MK_VERSION="${VERSION}"  $<$<CONFIG:Debug>:DEBUG> MK_ASSETS_DIR="${MK_ASSET_DIR}")
target_compile_definitions(Vultron PUBLIC VLT_ENABLE_VALIDATION_LAYERS=1 VLT_ASSETS_DIR="${VLT_ASSET_DIR}")